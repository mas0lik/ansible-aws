#Command to execute this playbook: ansible-playbook main.yml -i inventory
---
- name: Provision EC2 instances for Staging and Production environments
  hosts: localhost
  vars_files:
    - ./vars/main.yml
  gather_facts: False

  tasks:
    - name: Create a new EC2 key pair for Staging and Production environments
      ec2_key:
        name: "{{ key_name }}"
        region: "{{ region_name }}"
      register: ec2_key

    - name: Save private key
      copy: content="{{ ec2_key.key.private_key }}" dest="./keys/{{ key_name }}.pem" mode=0600
      when: ec2_key.changed

    - name: Create epmty S3 bucket for managing artifacts
      s3_bucket:
        name: "{{ s3_bucket_name }}"
        state: present

    - name: Obtain default VPC information from AWS
      ec2_vpc_net_facts:
        filters:
          "isDefault": "true"
      register: default_vpc

    - name: Obtain subnets for default VPC
      ec2_vpc_subnet_facts:
        filters:
          vpc-id: "{{ default_vpc['vpcs'][0]['vpc_id'] }}"
      register: subnet_info

    - set_fact:
        vpc_id: "{{ default_vpc['vpcs'][0]['vpc_id'] }}"
        random_subnet: "{{ subnet_info.subnets|map(attribute='id')|list|random }}"

    - name: Create EC2 VPC default security group for Staging and Production instances
      ec2_group:
        name: "{{ instance_name }}"
        description: Security Group for {{ instance_name }}
        vpc_id: "{{ vpc_id }}"
        region: "{{ region_name }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 8080
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow SSH for instances and HTTP connections for Tomcat9"
      register: security_group

    - name: Create two EC2 instances
      ec2:
        key_name: "{{ key_name }}"
        region: "{{ region_name }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami_id }}"
        vpc_subnet_id: "{{ random_subnet }}"
        group: "sg-{{ instance_name }}"
        wait: yes
        instance_tags:
          Name: "inst-{{ item }}"
        count_tag:
          Name: "inst-{{ item }}"
        exact_count: 1
        assign_public_ip: yes
      with_items: ['staging', 'production']
      register: ec2

    - name: Add created EC2 instances to the local inventory
      local_action: lineinfile
        path="inventory/ec2"
        regexp={{ item.public_ip }}
        insertafter="[staging]" line="{{ item.public_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=keys/{{ key_name }}.pem ansible_ssh_extra_args='-o StrictHostKeyChecking=no'"
      with_items: "{{ ec2[0].instances }}"

    - name: Add created EC2 instances to the local inventory
      local_action: lineinfile
        path="inventory/ec2"
        regexp={{ item.public_ip }}
        insertafter="[production]" line="{{ item.public_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=keys/{{ key_name }}.pem ansible_ssh_extra_args='-o StrictHostKeyChecking=no'"
      with_items: "{{ ec2[1].instances }}"

    - meta: refresh_inventory

    - name: Ensure EC2 instances are up and running
      ec2:
        region: "{{ region }}"
        instance_ids: "{{ item }}"
        state: 'running'
      with_items: "{{ ec2.instances }}"